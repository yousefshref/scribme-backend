# class ExtractTextFromPPTXView(APIView):
#     def post(self, request):
#         # Step 1: Get the uploaded file
#         pptx_file = request.FILES.get("pptx_file")
#         if not pptx_file:
#             return Response({"error": "PowerPoint file is required."}, status=status.HTTP_400_BAD_REQUEST)

#         try:
#             # Step 2: Open the PowerPoint file
#             prs = Presentation(pptx_file)
#             text_content = []
#             image_descriptions = []

#             # Step 3: Process each slide
#             for slide_number, slide in enumerate(prs.slides, start=1):
#                 slide_text = f"Slide {slide_number}:\n"

#                 # Extract text from each shape
#                 for shape in slide.shapes:
#                     if shape.has_text_frame:
#                         for paragraph in shape.text_frame.paragraphs:
#                             slide_text += paragraph.text + "\n"

#                     # Extract and describe images
#                     if shape.shape_type == MSO_SHAPE_TYPE.PICTURE and hasattr(shape, 'image'):
#                         image = shape.image
#                         image_blob = image.blob

#                         # Save the image temporarily
#                         with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as temp_image:
#                             temp_image.write(image_blob)
#                             temp_image_path = temp_image.name

#                         # Convert image to Base64 for GPT
#                         base64_image = base64.b64encode(image_blob).decode("utf-8")

#                         # Send the image to GPT for description
#                         prompt_text = "Describe the image in detail."
#                         gpt_description = describe_image_with_gpt(base64_image, prompt_text)
#                         image_descriptions.append(
#                             {"slide_number": slide_number, "description": gpt_description}
#                         )
#                         slide_text += f"Image description: {gpt_description}\n"

#                         # Clean up the temporary image
#                         os.remove(temp_image_path)

#                 text_content.append(slide_text)

#             # Step 4: Return extracted text and image descriptions
#             return Response(
#                 {
#                     "slides_text": text_content,
#                     "image_descriptions": image_descriptions,
#                 },
#                 status=status.HTTP_200_OK,
#             )

#         except Exception as e:
#             return Response(
#                 {"error": f"An error occurred while processing the file: {str(e)}"},
#                 status=status.HTTP_500_INTERNAL_SERVER_ERROR,
#             )


# class ExtractTextFromPPTXView(APIView):
    # def post(self, request):
    #     pptx_file = request.FILES.get("pptx_file")
    #     if not pptx_file:
    #         return Response({"error": "PowerPoint file is required."}, status=status.HTTP_400_BAD_REQUEST)

    #     prs = Presentation(pptx_file)
    #     text_content = []

    #     for slide_number, slide in enumerate(prs.slides, start=1):
    #         slide_text = f"Slide {slide_number}:\n"
            
    #         for shape in slide.shapes:
    #             # Extract text if the shape has text
    #             if shape.has_text_frame:
    #                 for paragraph in shape.text_frame.paragraphs:
    #                     slide_text += paragraph.text + "\n"
                
    #             # Detect and describe image if the shape is a picture
    #             if shape.shape_type == MSO_SHAPE_TYPE.PICTURE and hasattr(shape, 'image'):
    #                 image = shape.image
    #                 image_blob = image.blob
                    
    #                 # Save image temporarily for sending to GPT
    #                 with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as temp_image:
    #                     temp_image.write(image_blob)
    #                     # convert image to base64
    #                     base64_image = base64.b64encode(image_blob).decode("utf-8")

    #                 temp_image_path = temp_image.name

    #                 # prombet text
    #                 prompt_text = "Describe the image in detail."
                    
    #                 # Describe the image with GPT and append the result
    #                 gpt_description = describe_image_with_gpt(base64_image, prompt_text)
    #                 slide_text += f"Image description: {gpt_description}\n"
                    
    #                 # Clean up the temporary image file
    #                 os.remove(temp_image_path)

    #         text_content.append(slide_text)

    #     return Response({"slides_text": text_content}, status=status.HTTP_200_OK)






